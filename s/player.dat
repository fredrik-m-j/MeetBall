VerticalBatBlitSize	equ	(64*(45+BatVertMargin+BatVertMargin)*4)+1
HorizontalBatBlitSize	equ	(64*7*4)+(BatHorizByteWidth/2)		; hBobBlitSize - 7 lines to blit
BatVertScreenModulo	equ	ScrBpl-2				; [16px] 16 bits / 8 = 2 bytes to blit per line
BatHorizScreenModulo	equ	ScrBpl-BatHorizByteWidth		: [96px] 96 bits / 8 = 12 bytes to blit per line
BatDefaultSpeed		equ	2
BatVertMargin		equ	10		; Number of pixels
BatHorizByteWidth	equ	12		; Number of bytes/line to blit

BAT_VERT_DEFAULTHEIGHT	equ	33
BAT_HORIZ_DEFAULTWIDTH	equ	41		; This should be 44 to respect 4:3 aspect ratio

BATEFFECTBIT_GLUE       equ     0

BatGlueEffect		equ	%00000001
BatGunEffect		equ	%00000010
BallBreachEffect	equ	%00000010


JoystickControl		equ	0
KeyboardControl		equ	1

; Keyboard controls
; No keyboard support for player 0.
; Reason: A1200 keyboard matrix makes it too hard to achieve 4 simultaneous keyboard players.
; Also too awkward and stupid to have 4-8 hands around 1 keyboard.
; Will just end up blocking eachother if > 1 keydown on same matrix ROW, see:
; http://www.amigadev.elowar.com/read/ADCD_2.1/Hardware_Manual_guide/node017A.html
Player1KeyUp		equ	KEY_1
Player1KeyDown		equ	KEY_Q
Player1KeyFire		equ	KEY_LEFTSHIFT
Player2KeyLeft		equ	KEY_K
Player2KeyRight		equ	KEY_L
Player2KeyFire		equ	KEY_RIGHTAMIGA
Player3KeyLeft		equ	KEY_Z
Player3KeyRight		equ	KEY_X
Player3KeyFire		equ	KEY_LEFTAMIGA

LevelCount:		dc.w	1
PlayerCount:		dc.w	1

Player0Enabled:		dc.b	$ff
Player1Enabled:		dc.b	$ff
Player2Enabled:		dc.b	$ff
Player3Enabled:		dc.b	$ff

Player0EnabledCopy:	dc.b	$ff
Player1EnabledCopy:	dc.b	$ff
Player2EnabledCopy:	dc.b	$ff
Player3EnabledCopy:	dc.b	$ff
BallOwnerCopy:		dc.l	0

AFTERBATHIT_COUNT	equ	21
Player0AfterHitCount:	dc.b	0
Player1AfterHitCount:	dc.b	0
Player2AfterHitCount:	dc.b	0
Player3AfterHitCount:	dc.b	0
Player0AfterHitBall:	dc.l	0
Player1AfterHitBall:	dc.l	0
Player2AfterHitBall:	dc.l	0
Player3AfterHitBall:	dc.l	0

; Adresses to the source gfx
Bat0SourceBob:		dc.l	0
Bat0SourceBobMask:	dc.l	0
Bat1SourceBob:		dc.l	0
Bat1SourceBobMask:	dc.l	0
Bat2SourceBob:		dc.l	0
Bat2SourceBobMask:	dc.l	0
Bat3SourceBob:		dc.l	0
Bat3SourceBobMask:	dc.l	0


; Table for extending vertical bat
BatVertBlitSizes:
	dc.w	(64*(11+BatVertMargin)*4)+1,(64*(33+BatVertMargin+BatVertMargin)*4)+1	; Original 33+margins lines, 1 word to blit horizontally
	dc.w	(64*(12+BatVertMargin)*4)+1,(64*(34+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(13+BatVertMargin)*4)+1,(64*(35+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(14+BatVertMargin)*4)+1,(64*(36+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(15+BatVertMargin)*4)+1,(64*(37+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(16+BatVertMargin)*4)+1,(64*(38+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(17+BatVertMargin)*4)+1,(64*(39+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(18+BatVertMargin)*4)+1,(64*(40+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(19+BatVertMargin)*4)+1,(64*(41+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(20+BatVertMargin)*4)+1,(64*(42+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(21+BatVertMargin)*4)+1,(64*(43+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(22+BatVertMargin)*4)+1,(64*(44+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(23+BatVertMargin)*4)+1,(64*(45+BatVertMargin+BatVertMargin)*4)+1
	dc.w	(64*(24+BatVertMargin)*4)+1,(64*(46+BatVertMargin+BatVertMargin)*4)+1


BatHorizExtendMaskTable:
	dc.w	$ffff
	dc.w	$fffe
	dc.w	$fffc
	dc.w	$fff8
	dc.w	$fff0
	dc.w	$ffe0
	dc.w	$ffc0
	dc.w	$ff80
	dc.w	$ff00
	dc.w	$fe00
	dc.w	$fc00
	dc.w	$f800
	dc.w	$f000
	dc.w	$e000
	dc.w	$c000
	dc.w	$8000


Bat0:
	dc.l	0			; hAddress
	dc.l	0			; hSize +/- height/width
	dc.l	tBob			; hType
	dc.l	VerticalBatZones	; hFunctionlistAddress - bounce routines
	dc.l	Player0Score		; hPlayerScore
	dc.l	0			; hPlayerBat
	dc.l	0			; hSprBobMaskAddress
	dc.l	DEFAULT_MASK		; hBobBlitMasks

	dc.w	0			; hSprBobTopLeftXPos
	dc.w	0			; hSprBobTopLeftYPos
	dc.w	0			; hSprBobBottomRightXPos
	dc.w	0			; hSprBobBottomRightYPos
	dc.w    0			; hSprBobXCurrentSpeed
	dc.w    0			; hSprBobYCurrentSpeed
	dc.w    0			; hSprBobXSpeed
	dc.w    BatDefaultSpeed		; hSprBobYSpeed
	dc.w	BAT_VERT_DEFAULTHEIGHT	; hSprBobHeight
	dc.w	7			; hSprBobWidth
	dc.w	$151			; hSprBobAccentCol1
	dc.w 	$393			; hSprBobAccentCol2
	dc.w	0			; hBobLeftXOffset
	dc.w	0			; hBobRightXOffset
	dc.w	BatVertMargin		; hBobTopYOffset
	dc.w	BatVertMargin		; hBobBottomYOffset
	dc.w	0			; hBobBlitSrcModulo
	dc.w	BatVertScreenModulo	; hBobBlitDestModulo
	dc.w	(64*(BAT_VERT_DEFAULTHEIGHT+BatVertMargin+BatVertMargin)*4)+1	; hBobBlitSize
	dc.w	0			; hBatEffects
	dc.w	0			; hBatGunCooldown

Bat1:
	dc.l	0			; hAddress
	dc.l	0			; hSize +/- height/width
	dc.l	tBob			; hType
	dc.l	VerticalBatZones	; hFunctionlistAddress - bounce routines
	dc.l	Player1Score		; hPlayerScore
	dc.l	0			; hPlayerBat
	dc.l	0			; hSprBobMaskAddress
	dc.l	DEFAULT_MASK		; hBobBlitMasks

	dc.w	0			; hSprBobTopLeftXPos
	dc.w	0			; hSprBobTopLeftYPos
	dc.w	0			; hSprBobBottomRightXPos
	dc.w	0			; hSprBobBottomRightYPos
	dc.w    0			; hSprBobXCurrentSpeed
	dc.w    0			; hSprBobYCurrentSpeed
	dc.w    0			; hSprBobXSpeed
	dc.w    BatDefaultSpeed		; hSprBobYSpeed
	dc.w	BAT_VERT_DEFAULTHEIGHT	; hSprBobHeight
	dc.w	7			; hSprBobWidth
	dc.w	$933			; hSprBobAccentCol1
	dc.w 	$d88			; hSprBobAccentCol2
	dc.w	0			; hBobLeftXOffset
	dc.w	0			; hBobRightXOffset
	dc.w	BatVertMargin		; hBobTopYOffset
	dc.w	BatVertMargin		; hBobBottomYOffset
	dc.w	0			; hBobBlitSrcModulo
	dc.w	BatVertScreenModulo	; hBobBlitDestModulo
	dc.w	(64*(BAT_VERT_DEFAULTHEIGHT+BatVertMargin+BatVertMargin)*4)+1	; hBobBlitSize
	dc.w	0			; hBatEffects
	dc.w	0			; hBatGunCooldown

Bat2:
	dc.l	0			; hAddress
	dc.l	0			; hSize +/- height/width
	dc.l	tBob			; hType
	dc.l	HorizBatZones		; hFunctionlistAddress - bounce routines
	dc.l	Player2Score		; hPlayerScore
	dc.l	0			; hPlayerBat
	dc.l	0			; hSprBobMaskAddress
	dc.l	DEFAULT_MASK		; hBobBlitMasks

	dc.w	140			; hSprBobTopLeftXPos
	dc.w	244			; hSprBobTopLeftYPos
	dc.w	140+41			; hSprBobBottomRightXPos
	dc.w	244+7			; hSprBobBottomRightYPos
	dc.w    0			; hSprBobXCurrentSpeed
	dc.w    0			; hSprBobYCurrentSpeed
	dc.w    BatDefaultSpeed		; hSprBobXSpeed
	dc.w    0			; hSprBobYSpeed
	dc.w	7			; hSprBobHeight
	dc.w	BAT_HORIZ_DEFAULTWIDTH	; hSprBobWidth
	dc.w	$666			; hSprBobAccentCol1
	dc.w 	$bbb			; hSprBobAccentCol2
	dc.w	32			; hBobLeftXOffset
	dc.w	20			; hBobRightXOffset
	dc.w	0			; hBobTopYOffset
	dc.w	0			; hBobBottomYOffset
	dc.w	0			; hBobBlitSrcModulo
	dc.w	BatHorizScreenModulo	; hBobBlitDestModulo
	dc.w	HorizontalBatBlitSize	; hBobBlitSize
	dc.w	0			; hBatEffects
	dc.w	0			; hBatGunCooldown

Bat3:
	dc.l	0			; hAddress
	dc.l	0			; hSize +/- height/width
	dc.l	tBob			; hType
	dc.l	HorizBatZones		; hFunctionlistAddress - bounce routines
	dc.l	Player3Score		; hPlayerScore
	dc.l	0			; hPlayerBat
	dc.l	0			; hSprBobMaskAddress
	dc.l	DEFAULT_MASK		; hBobBlitMasks
	
	dc.w	140			; hSprBobTopLeftXPos
	dc.w	2			; hSprBobTopLeftYPos
	dc.w	140+41			; hSprBobBottomRightXPos
	dc.w	2+7			; hSprBobBottomRightYPos
	dc.w    0			; hSprBobXCurrentSpeed
	dc.w    0			; hSprBobYCurrentSpeed
	dc.w    BatDefaultSpeed		; hSprBobXSpeed
	dc.w    0			; hSprBobYSpeed
	dc.w	7			; hSprBobHeight
	dc.w	BAT_HORIZ_DEFAULTWIDTH	; hSprBobWidth
	dc.w	$339			; hSprBobAccentCol1
	dc.w 	$88d			; hSprBobAccentCol2
	dc.w	32			; hBobLeftXOffset
	dc.w	20			; hBobRightXOffset
	dc.w	0			; hBobTopYOffset
	dc.w	0			; hBobBottomYOffset
	dc.w	0			; hBobBlitSrcModulo
	dc.w	BatHorizScreenModulo	; hBobBlitDestModulo
	dc.w	HorizontalBatBlitSize	; hBobBlitSize
	dc.w	0			; hBatEffects
	dc.w	0			; hBatGunCooldown