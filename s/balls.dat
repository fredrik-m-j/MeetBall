BallDiameter            equ     7
VC_FACTOR               equ     64      ; Virtual coordinates have 2^6 times resolution
VC_POW                  equ     6       ; Exponent/power (base = 2), giving 2^6 times resolution

MIN_BALLSPEED           equ     21
DEFAULT_BALLSPEED       equ     50
USERMAX_BALLSPEED       equ     84

DEFAULT_RAMPUP          equ     2
MIN_RAMPUP              equ     1
MAX_RAMPUP              equ     42

BallsLeft:      dc.b    INIT_BALLCOUNT
        even
GenericBallBob:  dc.l    0

AllBalls:
	IFGT	ENABLE_DEBUG_BALL
        dc.l    2               ; Number of active balls -1
        dc.l    Ball0
        dc.l    Ball1
        dc.l    Ball2
        dc.l    0               ; Extra room to compensate for poor lost-ball logic... can we lose >3 balls in 1 frame?
        dc.l    0
        dc.l    0

        ELSE
        dc.l    0               ; Number of active balls -1
        dc.l    Ball0
        dc.l    0               ; Room for Ball1
        dc.l    0               ; Room for Ball2
        dc.l    0               ; Extra room to compensate for poor lost-ball logic... can we lose >3 balls in 1 frame?
        dc.l    0
        dc.l    0
        
	ENDIF

; No multiplexing - use 3 maps
Breachball0Map:
	dc.l	Spr_Ball0Anim0   ; Address to anim index 0 in CHIP ram
	dc.l	Spr_Ball0Anim1   ; Address to anim index 1 in CHIP ram
	dc.l	Spr_Ball0Anim2   ; Address to anim index 2 in CHIP ram
	dc.l	Spr_Ball0Anim3   ; Address to anim index 3 in CHIP ram
	dc.l	Spr_Ball0Anim4   ; Address to anim index 4 in CHIP ram
	dc.l	Spr_Ball0Anim5   ; Address to anim index 5 in CHIP ram
	dc.l	Spr_Ball0Anim6   ; Address to anim index 6 in CHIP ram
	dc.l	Spr_Ball0Anim7   ; Address to anim index 7 in CHIP ram
Breachball1Map:
	dc.l	Spr_Ball1Anim0   ; Address to anim index 0 in CHIP ram
	dc.l	Spr_Ball1Anim1   ; Address to anim index 1 in CHIP ram
	dc.l	Spr_Ball1Anim2   ; Address to anim index 2 in CHIP ram
	dc.l	Spr_Ball1Anim3   ; Address to anim index 3 in CHIP ram
	dc.l	Spr_Ball1Anim4   ; Address to anim index 4 in CHIP ram
	dc.l	Spr_Ball1Anim5   ; Address to anim index 5 in CHIP ram
	dc.l	Spr_Ball1Anim6   ; Address to anim index 6 in CHIP ram
	dc.l	Spr_Ball1Anim7   ; Address to anim index 7 in CHIP ram
Breachball2Map:
	dc.l	Spr_Ball2Anim0   ; Address to anim index 0 in CHIP ram
	dc.l	Spr_Ball2Anim1   ; Address to anim index 1 in CHIP ram
	dc.l	Spr_Ball2Anim2   ; Address to anim index 2 in CHIP ram
	dc.l	Spr_Ball2Anim3   ; Address to anim index 3 in CHIP ram
	dc.l	Spr_Ball2Anim4   ; Address to anim index 4 in CHIP ram
	dc.l	Spr_Ball2Anim5   ; Address to anim index 5 in CHIP ram
	dc.l	Spr_Ball2Anim6   ; Address to anim index 6 in CHIP ram
	dc.l	Spr_Ball2Anim7   ; Address to anim index 7 in CHIP ram

Ball0:
	dc.l	Spr_Ball0	; hAddress
	dc.l	Breachball0Map  ; hSpriteAnimMap
	dc.l	tSprite		; hType
	dc.b	-1		; hIndex offset into animation map. -1 = ANIMATION OFF
        dc.b    7		; hLastIndex
        dc.b    -1              ; hMoveIndex - not used
        dc.b    -1              ; hMoveLastIndex - not used
        dc.l	Copper_SPR0PTL	; hSpritePtr address into copperlist
        dc.l    0               ; hPlayerBat
        dc.l    -1              ; hSprBobMaskAddress - not used
        dc.l    -1              ; hBobBlitMasks - not used

        dc.w	0               ; hSprBobTopLeftXPos
        dc.w	0               ; hSprBobTopLeftYPos
        dc.w	7               ; hSprBobBottomRightXPos
        dc.w	7               ; hSprBobBottomRightYPos
        dc.w    0               ; hSprBobXCurrentSpeed
        dc.w    0               ; hSprBobYCurrentSpeed
	dc.w    0		; hSprBobXSpeed
	dc.w    0		; hSprBobYSpeed
        dc.w	BallDiameter    ; hSprBobHeight
        dc.w	BallDiameter    ; hSprBobWidth
        dc.w    0               ; hSprBobAccentCol1
        dc.w    0               ; hSprBobAccentCol2
        dc.w    0               ; hBallSpeedLevel
        dc.w    0               ; hBallEffects

Ball1:
	dc.l	Spr_Ball1	; hAddress
	dc.l	Breachball1Map  ; hSpriteAnimMap
	dc.l	tSprite		; hType
	dc.b	-1		; hIndex offset into animation map. -1 = ANIMATION OFF
        dc.b    7		; hLastIndex
        dc.b    -1              ; hMoveIndex - not used
        dc.b    -1              ; hMoveLastIndex - not used
        dc.l	Copper_SPR2PTL	; hSpritePtr address into copperlist
        dc.l    0               ; hPlayerBat
        dc.l    -1              ; hSprBobMaskAddress - not used
        dc.l    -1              ; hBobBlitMasks - not used

        dc.w	100             ; hSprBobTopLeftXPos
        dc.w	100             ; hSprBobTopLeftYPos
        dc.w	107             ; hSprBobBottomRightXPos
        dc.w	107             ; hSprBobBottomRightYPos
        dc.w    0               ; hSprBobXCurrentSpeed
        dc.w    0               ; hSprBobYCurrentSpeed
	dc.w    0		; hSprBobXSpeed
	dc.w    0		; hSprBobYSpeed
        dc.w	BallDiameter    ; hSprBobHeight
        dc.w	BallDiameter    ; hSprBobWidth
        dc.w    0               ; hSprBobAccentCol1
        dc.w    0               ; hSprBobAccentCol2
        dc.w    0               ; hBallSpeedLevel
        dc.w    0               ; hBallEffects

Ball2:
	dc.l	Spr_Ball2       ; hAddress
	dc.l	Breachball2Map  ; hSpriteAnimMap
	dc.l	tSprite		; hType
	dc.b	-1		; hIndex offset into animation map. -1 = ANIMATION OFF
        dc.b    7		; hLastIndex
        dc.b    -1              ; hMoveIndex - not used
        dc.b    -1              ; hMoveLastIndex - not used
        dc.l	Copper_SPR4PTL	; hSpritePtr address into copperlist
        dc.l    0               ; hPlayerBat
        dc.l    -1              ; hSprBobMaskAddress - not used
        dc.l    -1              ; hBobBlitMasks - not used

        dc.w	150             ; hSprBobTopLeftXPos
        dc.w	150             ; hSprBobTopLeftYPos
        dc.w	157             ; hSprBobBottomRightXPos
        dc.w	157             ; hSprBobBottomRightYPos
        dc.w    0               ; hSprBobXCurrentSpeed
        dc.w    0               ; hSprBobYCurrentSpeed
	dc.w    0		; hSprBobXSpeed
	dc.w    0		; hSprBobYSpeed
        dc.w	BallDiameter    ; hSprBobHeight
        dc.w	BallDiameter    ; hSprBobWidth
        dc.w    0               ; hSprBobAccentCol1
        dc.w    0               ; hSprBobAccentCol2
        dc.w    0               ; hBallSpeedLevel
        dc.w    0               ; hBallEffects

BallspeedBase:     dc.w    DEFAULT_BALLSPEED

; Buggy collision detection above this speed
MaxBallSpeedWithOkCollissionDetection   equ     2*VC_FACTOR

BallspeedFrames:	dc.b	DEFAULT_RAMPUP	; Increase speed every x seconds
        even

MaxBallSpeedLevel       equ     2       ; 0 indexed => one less
BallSpeedLevel123:
        dc.w    1*51,2*51,3*51
BallSpeedLevel246:
        dc.w    2*51,4*51,6*51
BallSpeedLevel369:
        dc.w    3*51,6*51,9*51